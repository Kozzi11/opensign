/*
    Copyright 2006 IT Practice A/S
    Copyright 2006 TDC Totall√∏sninger A/S
    Copyright 2006 Jens Bo Friis
    Copyright 2006 Preben Rosendal Valeur
    Copyright 2006 Carsten Raskgaard


    This file is part of OpenSign.

    OpenSign is free software; you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation; either version 2.1 of the License, or
    (at your option) any later version.

    OpenSign is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with OpenOcesAPI; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA


    Note to developers:
    If you add code to this file, please take a minute to add an additional
    copyright statement above and an additional
    @author statement below.
 */

/* $Id: Display.java,v 1.4 2012/09/27 11:03:50 pakj Exp $ */

package org.openoces.opensign.demo.servlets;

import org.apache.log4j.Logger;
import org.apache.xml.security.signature.XMLSignatureException;
import org.openoces.ooapi.exceptions.InternalException;
import org.openoces.ooapi.signatures.OpensignAbstractSignature;
import org.openoces.ooapi.signatures.SignatureProperty;
import org.openoces.opensign.demo.utils.Base64;
import org.xml.sax.SAXException;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.TransformerException;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Map;

/**
 * This class implements a servlet used to display the signature generated by the demo setup on
 * www.openoces.org.
 *
 * @author Carsten Raskgaard  <carsten@raskgaard.dk>
 */

public class Display extends HttpServlet {
    private static final Logger logger = Logger.getLogger(Display.class);
    private static final long serialVersionUID = -1790432457687028507L;

    public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        String result;
        StringBuilder bs = new StringBuilder();

        result = request.getParameter("result");

        if ("ok".equals(result)) {
            try {

                Integer id = new Integer(request.getParameter("id"));
                File directory = (File) getServletContext().getAttribute("javax.servlet.context.tempdir");
                File file = new File(directory, "opensign_" + id + ".tmp");
                FileInputStream f = new FileInputStream(file);
                byte[] buf = new byte[8192];
                int i;
                while ((i = f.read(buf)) != -1) {
                    bs.append(new String(buf, 0, i, "UTF-8"));
                }
                f.close();
                file.delete();
                result = "ok";
            } catch (Exception e) {
                result = "error";
            }
        }

        generateResponse(response, result, bs.toString());
    }

    public void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        String result = request.getParameter("result");
        String message = request.getParameter("message");
        generateResponse(response, result, message);
    }

    private void generateResponse(HttpServletResponse response, String result, String message) throws IOException {
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();
        out.print(generateHtml(result, message));
    }

    private String getPropertiesHTML(Map<String, SignatureProperty> propertyMap) throws TransformerException, IOException, XMLSignatureException, ParserConfigurationException, SAXException {
        StringBuilder sb = new StringBuilder();

        sb.append("<table border=1>");
        sb.append("<tr><th>Name</th><th>Encoding</th><th>Visible to signer</th><th>Value</th></tr>");

        for(String name : propertyMap.keySet()) {
            SignatureProperty value =  propertyMap.get(name);
            String encoding = "n/a";

            sb.append("<tr>");
            sb.append("<td>");
            sb.append(name);
            sb.append("</td>");
            sb.append("<td>");
            sb.append(encoding);
            sb.append("</td>");
            sb.append("<td>");
            sb.append(value.isVisibleToSigner());
            sb.append("</td>");
            sb.append("<td>");
            if (name.equals("signtext")) {
                sb.append("<textarea cols=\"80\" rows=\"10\" readonly>").append(value.getValue()).append("</textarea>");
            } else {
                sb.append(value.getValue());
            }
            sb.append("</td>");
            sb.append("</tr>");

        }

        sb.append("</table>");

        return sb.toString();
    }

    private StringBuffer generateHtml(String result, String message) {
        StringBuffer sb = new StringBuffer();

        sb.append("<html>");
        sb.append("<head>");
        sb.append("<title></title>");
        sb.append("</head>");
        sb.append("<body bgcolor=\"white\">");
        sb.append("<h2>Summary of the signing process:</h2>");
        sb.append("Result returned from the applet: <b>").append(result).append("</b><br>");

        sb.append("<a href=\"/demo\">Back to demo entrance</a><br>");
        sb.append("<form name=\"form\" method=\"post\" action=\"/demo/servlet/XMLDisplay\">");
        sb.append("<input type=\"hidden\" name=\"xml\" value=\"").append(message).append("\">");
        sb.append("<br>");
        sb.append("<input type=\"submit\" value=\"view xml\">");
        sb.append("</form>");
        sb.append("<br>");

        boolean sigVerified = true;
        OpensignAbstractSignature aos = null;
        StringBuilder props = new StringBuilder();

        if ("ok".equals(result)) {
            try {
                String doc = Base64.base64Decode(message);
                aos = org.openoces.ooapi.signatures.OpensignSignatureFactory.getInstance().generateOpensignSignature(doc);
                aos.verify();
                aos.getSignatureProperties();
            } catch (Exception e) {
                sigVerified = false;
            }

            try {
                props.append(getPropertiesHTML(aos.getSignatureProperties()));
            } catch (XMLSignatureException e) {
                logger.error(e.getMessage(), e);
            } catch (TransformerException e) {
                logger.error(e.getMessage(), e);
            } catch (IOException e) {
                logger.error(e.getMessage(), e);
            } catch (ParserConfigurationException e) {
                logger.error(e.getMessage(), e);
            } catch (SAXException e) {
                logger.error(e.getMessage(), e);
            } catch (InternalException e) {
                logger.error(e.getMessage(), e);
            } catch (NullPointerException e) {
                logger.error(e.getMessage(), e);
            }
        }
        sb.append("Signature verification ").append(sigVerified ? "was <b>successful</b>" : "<b>failed</b>").append("<br>");
        sb.append("<h3>The signed part of the signature contains:</h3>");
        sb.append(props);
        sb.append("</body>");
        sb.append("</html>");
        return sb;
    }
}