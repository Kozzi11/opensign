/*
    Copyright 2006 IT Practice A/S
    Copyright 2006 TDC Totalløsninger A/S
    Copyright 2006 Jens Bo Friis
    Copyright 2006 Preben Rosendal Valeur
    Copyright 2006 Carsten Raskgaard
    Copyright 2006 Paw F. Kjeldgaard


    This file is part of OpenSign.

    OpenSign is free software; you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation; either version 2.1 of the License, or
    (at your option) any later version.

    OpenSign is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with OpenOcesAPI; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA


    Note to developers:
    If you add code to this file, please take a minute to add an additional
    copyright statement above and an additional
    @author statement below.
*/

/* $Id: AttachmentImpl.java,v 1.4 2012/09/27 11:03:45 pakj Exp $ */

package org.openoces.opensign.client.applet.attach;

/**
 * This class implements a generic attachment
 *
 * @author Preben Rosendal Valeur  <prv@tdc.dk>
 * @author Carsten Raskgaard  <carsten@raskgaard.dk>
 * @author Paw F. Kjeldgaard <pakj@danid.dk>
 * @author Mads Jensen <mjn@trifork.com>
 * @author Jeppe Burchhardt <Jeppe.Burchhardt@Cryptomathic.com>
 * @author Ole Friis Østergaard <ofo@trifork.com>
 */

import org.openoces.opensign.appletsupport.Attachment;
import org.openoces.opensign.appletsupport.MimeTypeValidator;
import org.openoces.opensign.client.applet.attach.resources.AttachmentResourceManager;
import org.openoces.opensign.client.applet.dialogs.AbstractDialog;
import org.openoces.opensign.client.applet.dialogs.DlgInformation;
import org.openoces.opensign.utils.Base64;
import org.openoces.opensign.utils.FileLog;
import org.openoces.opensign.utils.IOUtils;
import org.openoces.opensign.xml.nanoxml.XMLElement;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.util.List;
import java.util.Observable;

public class AttachmentImpl extends Observable implements ActionListener, Attachment {
    private String title;
    private String path;
    private String mimeType = "undefined";
    private long size;
    private String hashAlg = "sha1";
    private boolean optional;
    private boolean hasSeen;
    private Checksum hashValue;
    private Checksum localHashValue;

    private boolean checksumVerified;
    private AttachmentServer server;
    private AbstractDialog dialogOwner;

    public AttachmentImpl(XMLElement param, AttachmentServer server) {
        this.server = server;
        List<XMLElement> children = param.getChildren();
        for (XMLElement child : children) {
            String name = child.getName();
            if (name.equals("title")) {
                title = child.getContent();
            } else if (name.equals("path")) {
                path = child.getContent();
            } else if (name.equals("size")) {
                size = Long.parseLong(child.getContent());
            } else if (name.equals("hashValue")) {
                byte[] bs = Base64.decode(child.getContent().getBytes());
                hashValue = new Sha1Checksum(bs);
            } else if (name.equals("hashAlg")) {
                hashAlg = child.getContent();
            } else if (name.equals("mimeType")) {
                String unvalidatedMimeType = child.getContent();
                if (MimeTypeValidator.validate(unvalidatedMimeType)) {
                    mimeType = unvalidatedMimeType;
                } else {
                    FileLog.warn("invalid mime type for an attachment: " + unvalidatedMimeType + ". Using default mime-type.");
                    mimeType = "application/octet-stream";
                }
            } else if (name.equals("optional")) {
                optional = true;
            }
        }
    }

    public String toString() {
        return "Attachment:\n" +
                "\ttitle: " + getTitle() +
                "\tpath: " + getPath() +
                "\tmimeType: " + getMimeType() +
                "\tsize: " + getSize() +
                "\thashAlg: " + getHashAlg() +
                "\thashValue: " + getHashValue();
    }

    public String getTitle() {
        return title;
    }

    public boolean isViewable() {
        return AttachmentViewerManager.hasViewer(mimeType);
    }

    public void setDialogOwner(AbstractDialog owner) {
        this.dialogOwner = owner;
    }

    void view(JComponent oldFocusComponent) {
        try {
            if (!isViewable()) {
                FileLog.warn("Tried to view unviewable attachment");
                return;
            }
            AttachmentViewer viewer = AttachmentViewerManager.getViewer(mimeType);
            byte[] content = server.getContent(this, true);
            viewer.view(dialogOwner, oldFocusComponent, getTitle(), content);
            setHasSeen();
        } catch (IOException e) {
            FileLog.warn("unable to download attachment: " + this.getPath() + "( + " + e.getMessage() + ")", e);
            DlgInformation dlgInfo = new DlgInformation(dialogOwner, oldFocusComponent, "fixme", "fixme: unable to download attachment");
            dlgInfo.show();
        } catch (InvalidContentException e) {
            DlgInformation dlgInfo = new DlgInformation(dialogOwner, oldFocusComponent, AttachmentResourceManager.getString("ATTACHMENT_VIEW_INVALID_CONTENT_HEADER"),
                    AttachmentResourceManager.getString("ATTACHMENT_VIEW_INVALID_CONTENT_BODY"));
            dlgInfo.show();
        }
    }

    private void setHasSeen() {
        hasSeen = true;
        this.setChanged();
        this.notifyObservers();
    }

    void save(JComponent oldFocusComponent) {
        // openfiledialog and then:
        String filePath = server.getAttachmentFilePath(getTitle(), oldFocusComponent);

        if (filePath == null) {
            FileLog.fatal("filePath is null");
            // cancelled
            return;
        }
        File f = new File(filePath);

        OutputStream toFile = null;
        try {
            try {
                toFile = new BufferedOutputStream(new FileOutputStream(f));
            } catch (FileNotFoundException e) {
                throw new RuntimeException(e);
            }
            byte[] content = server.getContent(this, false);
            toFile.write(content);
            toFile.flush();

            setHasSeen();
        } catch (IOException e) {
            if (f.exists()) {
                f.delete();
            }
            DlgInformation dlgInfo = new DlgInformation(dialogOwner, oldFocusComponent, AttachmentResourceManager.getString("ATTACHMENT_SAVE_FAILED_HEADER"),
                    AttachmentResourceManager.getString("ATTACHMENT_SAVE_FAILED_BODY"));
            dlgInfo.show();
        } catch (InvalidContentException e) {
            DlgInformation dlgInfo = new DlgInformation(dialogOwner, oldFocusComponent, AttachmentResourceManager.getString("ATTACHMENT_SAVE_INVALID_CONTENT_HEADER"),
                    AttachmentResourceManager.getString("ATTACHMENT_SAVE_INVALID_CONTENT_BODY"));
            dlgInfo.show();
        } finally {
            IOUtils.close(toFile);
        }
    }

    public String getPath() {
        return path;
    }

    public boolean isHasSeen() {
        return hasSeen;
    }

    /**
     * Returns a textual representation of the hash value of the attachment as described by the server.
     *
     * @return the textual representation of the hash of the attachment
     */
    public String getHashValue() {
        return new String(Base64.encode(hashValue.getShaValue()));
    }

    public Checksum getLocalChecksum() {
        return localHashValue;
    }

    public void setLocalChecksum(Checksum v) {
        localHashValue = v;
    }

    public Checksum getChecksum() {
        /* return a new object to avoid unintended manipulation of the value */
        return new Sha1Checksum(hashValue.getShaValue());
    }

    String getHashAlg() {
        return hashAlg;
    }

    public String getMimeType() {
        return mimeType;
    }

    public byte[] getContents() throws InvalidContentException {
        try {
            return server.getContent(this, false);
        } catch (IOException e) {
            FileLog.warn("Unable to download attachment: " + this.getPath());
            DlgInformation dlgInfo = new DlgInformation(dialogOwner, null, "Error", "Unable to download attachment");
            dlgInfo.show();
            return null;
        }
    }

    public long getSize() {
        return size;
    }

    public boolean isOptional() {
        return optional;
    }

    public boolean isPrimary() {
        return false;
    }

    public void actionPerformed(ActionEvent e) {
        // view or save
        if (e.getActionCommand().equals("VIEW")) {
            view((JComponent)e.getSource());
        } else if (e.getActionCommand().equals("SAVE")) {
            save((JComponent)e.getSource());
        }
    }

    boolean getChecksumVerified() {
        return checksumVerified;
    }

    public void setChecksumVerified() {
        checksumVerified = true;
    }
}